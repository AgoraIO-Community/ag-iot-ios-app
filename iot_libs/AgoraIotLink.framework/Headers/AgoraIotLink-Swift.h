#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef AGORAIOTLINK_SWIFT_H
#define AGORAIOTLINK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreVideo;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AgoraIotLink",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, ActionAck, closed) {
  ActionAckConnectFail = 0,
  ActionAckRemoteHangup = 1,
  ActionAckRemoteVideoReady = 2,
  ActionAckLocalHangup = 3,
  ActionAckLocalNetLost = 4,
  ActionAckUnknownAction = 5,
};


SWIFT_CLASS("_TtC12AgoraIotLink15ActionExtraInfo")
@interface ActionExtraInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AudioCodecType, closed) {
  AudioCodecTypeG711U = 0,
  AudioCodecTypeG711A = 1,
  AudioCodecTypeG722 = 2,
  AudioCodecTypeOPUS = 3,
};

typedef SWIFT_ENUM(NSInteger, AudioEffectId, closed) {
  AudioEffectIdNORMAL = 0,
/// < 原声
  AudioEffectIdKTV = 1,
/// < KTV
  AudioEffectIdCONCERT = 2,
/// < 演唱会
  AudioEffectIdSTUDIO = 3,
/// < 录音棚
  AudioEffectIdPHONOGRAPH = 4,
/// < 留声机
  AudioEffectIdVIRTUALSTEREO = 5,
/// < 虚拟立体声
  AudioEffectIdSPACIAL = 6,
/// < 空旷
  AudioEffectIdETHEREAL = 7,
/// < 空灵
  AudioEffectIdVOICE3D = 8,
/// < 3D人声
  AudioEffectIdUNCLE = 9,
/// < 大叔
  AudioEffectIdOLDMAN = 10,
/// < 老男人
  AudioEffectIdBOY = 11,
/// < 男孩
  AudioEffectIdSISTER = 12,
/// < 少女
  AudioEffectIdGIRL = 13,
/// < 女孩
  AudioEffectIdPIGKING = 14,
/// < 猪八戒
  AudioEffectIdHULK = 15,
/// < 绿巨人 浩克
  AudioEffectIdRNB = 16,
/// < R&B
  AudioEffectIdPOPULAR = 17,
/// < 流行
  AudioEffectIdPITCHCORRECTION = 18,
};


SWIFT_CLASS("_TtC12AgoraIotLink11CallSession")
@interface CallSession : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AgoraIotLink11ChannelInfo")
@interface ChannelInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ConnectCallback, closed) {
  ConnectCallbackOnConnectDone = 0,
  ConnectCallbackOnDisconnected = 1,
};

@class NSString;

SWIFT_CLASS("_TtC12AgoraIotLink18ConnectCreateParam")
@interface ConnectCreateParam : NSObject
@property (nonatomic, copy) NSString * _Nonnull mPeerNodeId;
@property (nonatomic) BOOL mEncrypt;
@property (nonatomic, copy) NSString * _Nonnull mAttachMsg;
- (nonnull instancetype)initWithMPeerNodeId:(NSString * _Nonnull)mPeerNodeId mEncrypt:(BOOL)mEncrypt mAttachMsg:(NSString * _Nonnull)mAttachMsg OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ConnectState, closed) {
  ConnectStateDisconnected = 0,
  ConnectStateConnectReqing = 1,
  ConnectStateConnecting = 2,
  ConnectStateConnected = 3,
};

typedef SWIFT_ENUM(NSInteger, ConnectType, closed) {
  ConnectTypeUnknown = 0,
  ConnectTypeActive = 1,
  ConnectTypePassive = 2,
};


SWIFT_CLASS("_TtC12AgoraIotLink14ConnectionInfo")
@interface ConnectionInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AgoraIotLink17DataWriterManager")
@interface DataWriterManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12AgoraIotLink7ErrCode")
@interface ErrCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_NONE;)
+ (NSInteger)XERR_NONE SWIFT_WARN_UNUSED_RESULT;
/// < 成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XOK;)
+ (NSInteger)XOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_BASE;)
+ (NSInteger)XERR_BASE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_UNKNOWN;)
+ (NSInteger)XERR_UNKNOWN SWIFT_WARN_UNUSED_RESULT;
/// < 未知错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_INVALID_PARAM;)
+ (NSInteger)XERR_INVALID_PARAM SWIFT_WARN_UNUSED_RESULT;
/// < 参数错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_UNSUPPORTED;)
+ (NSInteger)XERR_UNSUPPORTED SWIFT_WARN_UNUSED_RESULT;
/// < 当前操作不支持
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_BAD_STATE;)
+ (NSInteger)XERR_BAD_STATE SWIFT_WARN_UNUSED_RESULT;
/// < 当前状态不正确，不能操作
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_NOT_FOUND;)
+ (NSInteger)XERR_NOT_FOUND SWIFT_WARN_UNUSED_RESULT;
/// < 没有找到相关数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_NO_MEMORY;)
+ (NSInteger)XERR_NO_MEMORY SWIFT_WARN_UNUSED_RESULT;
/// < 内存不足
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_BUFFER_OVERFLOW;)
+ (NSInteger)XERR_BUFFER_OVERFLOW SWIFT_WARN_UNUSED_RESULT;
/// < 缓冲区中数据不足
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_BUFFER_UNDERFLOW;)
+ (NSInteger)XERR_BUFFER_UNDERFLOW SWIFT_WARN_UNUSED_RESULT;
/// < 缓冲区中数据过多放不下
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_TIMEOUT;)
+ (NSInteger)XERR_TIMEOUT SWIFT_WARN_UNUSED_RESULT;
/// < 操作超时
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_NETWORK;)
+ (NSInteger)XERR_NETWORK SWIFT_WARN_UNUSED_RESULT;
/// < 网络错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_TOKEN_INVALID;)
+ (NSInteger)XERR_TOKEN_INVALID SWIFT_WARN_UNUSED_RESULT;
/// < Token无效
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_SYSTEM;)
+ (NSInteger)XERR_SYSTEM SWIFT_WARN_UNUSED_RESULT;
/// < 系统错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_APPID_INVALID;)
+ (NSInteger)XERR_APPID_INVALID SWIFT_WARN_UNUSED_RESULT;
/// < AppId不支持
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_NODEID_INVALID;)
+ (NSInteger)XERR_NODEID_INVALID SWIFT_WARN_UNUSED_RESULT;
/// < NodeId无效
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_NOT_AUTHORIZED;)
+ (NSInteger)XERR_NOT_AUTHORIZED SWIFT_WARN_UNUSED_RESULT;
/// < 未认证
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_INVOKE_TOO_OFTEN;)
+ (NSInteger)XERR_INVOKE_TOO_OFTEN SWIFT_WARN_UNUSED_RESULT;
/// < 调用太频繁
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_JSON_READ;)
+ (NSInteger)XERR_JSON_READ SWIFT_WARN_UNUSED_RESULT;
/// < JSON解析错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_JSON_WRITE;)
+ (NSInteger)XERR_JSON_WRITE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CONNOBJ_BASE;)
+ (NSInteger)XERR_CONNOBJ_BASE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CONNOBJ_SUBSCRIBE_CMD;)
+ (NSInteger)XERR_CONNOBJ_SUBSCRIBE_CMD SWIFT_WARN_UNUSED_RESULT;
/// < 订阅命令发送失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CONNOBJ_NO_FRAME;)
+ (NSInteger)XERR_CONNOBJ_NO_FRAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_BASE;)
+ (NSInteger)XERR_RTMMGR_BASE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_UNKNOWN;)
+ (NSInteger)XERR_RTMMGR_LOGIN_UNKNOWN SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_REJECTED;)
+ (NSInteger)XERR_RTMMGR_LOGIN_REJECTED SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录被拒绝
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_INVALID_ARGUMENT;)
+ (NSInteger)XERR_RTMMGR_LOGIN_INVALID_ARGUMENT SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录时参数错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_INVALID_APP_ID;)
+ (NSInteger)XERR_RTMMGR_LOGIN_INVALID_APP_ID SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录时appId错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_INVALID_TOKEN;)
+ (NSInteger)XERR_RTMMGR_LOGIN_INVALID_TOKEN SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录时token错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_TOKEN_EXPIRED;)
+ (NSInteger)XERR_RTMMGR_LOGIN_TOKEN_EXPIRED SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录时token过期
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_NOT_AUTHORIZED;)
+ (NSInteger)XERR_RTMMGR_LOGIN_NOT_AUTHORIZED SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录时鉴权失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_ALREADY_LOGIN;)
+ (NSInteger)XERR_RTMMGR_LOGIN_ALREADY_LOGIN SWIFT_WARN_UNUSED_RESULT;
/// < RTM已经登录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_TIMEOUT;)
+ (NSInteger)XERR_RTMMGR_LOGIN_TIMEOUT SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录超时
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_TOO_OFTEN;)
+ (NSInteger)XERR_RTMMGR_LOGIN_TOO_OFTEN SWIFT_WARN_UNUSED_RESULT;
/// < RTM登录太频繁
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGIN_NOT_INITIALIZED;)
+ (NSInteger)XERR_RTMMGR_LOGIN_NOT_INITIALIZED SWIFT_WARN_UNUSED_RESULT;
/// < RTM未初始化
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_FAILURE;)
+ (NSInteger)XERR_RTMMGR_MSG_FAILURE SWIFT_WARN_UNUSED_RESULT;
/// < 发送RTM消息失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_TIMEOUT;)
+ (NSInteger)XERR_RTMMGR_MSG_TIMEOUT SWIFT_WARN_UNUSED_RESULT;
/// < 发送RTM消息超时
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_PEER_UNREACHABLE;)
+ (NSInteger)XERR_RTMMGR_MSG_PEER_UNREACHABLE SWIFT_WARN_UNUSED_RESULT;
/// < 消息不可到达
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_CACHED_BY_SERVER;)
+ (NSInteger)XERR_RTMMGR_MSG_CACHED_BY_SERVER SWIFT_WARN_UNUSED_RESULT;
/// < 消息未发送被缓存了
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_TOO_OFTEN;)
+ (NSInteger)XERR_RTMMGR_MSG_TOO_OFTEN SWIFT_WARN_UNUSED_RESULT;
/// < 消息发送太频繁
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_INVALID_USERID;)
+ (NSInteger)XERR_RTMMGR_MSG_INVALID_USERID SWIFT_WARN_UNUSED_RESULT;
/// < RTM用户账号无效
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_INVALID_MESSAGE;)
+ (NSInteger)XERR_RTMMGR_MSG_INVALID_MESSAGE SWIFT_WARN_UNUSED_RESULT;
/// < RTM消息无效
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_IMCOMPATIBLE_MESSAGE;)
+ (NSInteger)XERR_RTMMGR_MSG_IMCOMPATIBLE_MESSAGE SWIFT_WARN_UNUSED_RESULT;
/// < 消息不兼容
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_NOT_INITIALIZED;)
+ (NSInteger)XERR_RTMMGR_MSG_NOT_INITIALIZED SWIFT_WARN_UNUSED_RESULT;
/// < RTM未初始化发消息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_MSG_USER_NOT_LOGGED_IN;)
+ (NSInteger)XERR_RTMMGR_MSG_USER_NOT_LOGGED_IN SWIFT_WARN_UNUSED_RESULT;
/// < RTM未登录发消息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGOUT_REJECT;)
+ (NSInteger)XERR_RTMMGR_LOGOUT_REJECT SWIFT_WARN_UNUSED_RESULT;
/// < RTM登出被拒绝
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGOUT_NOT_INITIALIZED;)
+ (NSInteger)XERR_RTMMGR_LOGOUT_NOT_INITIALIZED SWIFT_WARN_UNUSED_RESULT;
/// < RTM未初始化登出
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_LOGOUT_NOT_LOGGED_IN;)
+ (NSInteger)XERR_RTMMGR_LOGOUT_NOT_LOGGED_IN SWIFT_WARN_UNUSED_RESULT;
/// < RTM未登录就登出
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_FAILURE;)
+ (NSInteger)XERR_RTMMGR_RENEW_FAILURE SWIFT_WARN_UNUSED_RESULT;
/// < RTM Renew token失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_INVALID_ARGUMENT;)
+ (NSInteger)XERR_RTMMGR_RENEW_INVALID_ARGUMENT SWIFT_WARN_UNUSED_RESULT;
/// < RTM Renew参数错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_REJECTED;)
+ (NSInteger)XERR_RTMMGR_RENEW_REJECTED SWIFT_WARN_UNUSED_RESULT;
/// < RTM Renew被拒绝
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_TOO_OFTEN;)
+ (NSInteger)XERR_RTMMGR_RENEW_TOO_OFTEN SWIFT_WARN_UNUSED_RESULT;
/// < RTM Renew太频繁
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_TOKEN_EXPIRED;)
+ (NSInteger)XERR_RTMMGR_RENEW_TOKEN_EXPIRED SWIFT_WARN_UNUSED_RESULT;
/// < RTM Renew过期
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_INVALID_TOKEN;)
+ (NSInteger)XERR_RTMMGR_RENEW_INVALID_TOKEN SWIFT_WARN_UNUSED_RESULT;
/// < RTM Renew无效
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_NOT_INITIALIZED;)
+ (NSInteger)XERR_RTMMGR_RENEW_NOT_INITIALIZED SWIFT_WARN_UNUSED_RESULT;
/// < RTM未初始化Renew
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_RTMMGR_RENEW_NOT_LOGGED_IN;)
+ (NSInteger)XERR_RTMMGR_RENEW_NOT_LOGGED_IN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_BASE;)
+ (NSInteger)XERR_CALLKIT_BASE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_TIMEOUT;)
+ (NSInteger)XERR_CALLKIT_TIMEOUT SWIFT_WARN_UNUSED_RESULT;
/// < 呼叫超时无响应
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_DIAL;)
+ (NSInteger)XERR_CALLKIT_DIAL SWIFT_WARN_UNUSED_RESULT;
/// < 呼叫拨号失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_HANGUP;)
+ (NSInteger)XERR_CALLKIT_HANGUP SWIFT_WARN_UNUSED_RESULT;
/// < 呼叫挂断失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_ANSWER;)
+ (NSInteger)XERR_CALLKIT_ANSWER SWIFT_WARN_UNUSED_RESULT;
/// < 呼叫接听失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_REJECT;)
+ (NSInteger)XERR_CALLKIT_REJECT SWIFT_WARN_UNUSED_RESULT;
/// < 呼叫拒绝失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_PEER_BUSY;)
+ (NSInteger)XERR_CALLKIT_PEER_BUSY SWIFT_WARN_UNUSED_RESULT;
/// < 对端忙
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_LOCAL_BUSY;)
+ (NSInteger)XERR_CALLKIT_LOCAL_BUSY SWIFT_WARN_UNUSED_RESULT;
/// < 本地端忙
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger XERR_CALLKIT_ERR_OPT;)
+ (NSInteger)XERR_CALLKIT_ERR_OPT SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol IConnectionObj;
enum StreamId : NSInteger;
@class NSData;

SWIFT_PROTOCOL("_TtP12AgoraIotLink17ICallbackListener_")
@protocol ICallbackListener
/// @brief 对端首帧出图
/// @param connectObj : 当前连接对象
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @param videoWidth : 首帧视频宽度
/// @param videoHeight : 首帧视频高度
- (void)onStreamFirstFrameWithConnectObj:(id <IConnectionObj> _Nullable)connectObj subStreamId:(enum StreamId)subStreamId videoWidth:(NSInteger)videoWidth videoHeight:(NSInteger)videoHeight;
/// @brief 对端视频帧数据
/// @param connectObj : 当前连接对象
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @param videoWidth : 视频帧宽度
/// @param videoHeight : 视频帧高度
- (void)onStreamVideoFrameWithConnectObj:(id <IConnectionObj> _Nullable)connectObj subStreamId:(enum StreamId)subStreamId pixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer videoWidth:(NSInteger)videoWidth videoHeight:(NSInteger)videoHeight;
/// @brief 错误事件，在订阅预览视频时错误发生
/// @param connectObj : 当前连接对象
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @param errCode : 错误码. XERR_CONNOBJ_SUBSCRIBE_CMD––订阅命令发送失败
/// XERR_CONNOBJ_NO_FRAME––订阅后没有视频帧过来
- (void)onStreamErrorWithConnectObj:(id <IConnectionObj> _Nullable)connectObj subStreamId:(enum StreamId)subStreamId errCode:(NSInteger)errCode;
/// @brief 消息发送完成事件
/// @param connectObj : 当前连接对象
/// @param errCode : 发送结果错误码
/// XOK––表示发送成功；
/// XERR_TIMEOUT––表示SDK内部消息系统网络问题，导致发送超时失败
/// XERR_RTMMGR_MSG_xxxx––表示SDK消息系统相应问题
/// @param messageId : message的唯一标识
/// @param messageData : 发送的消息内容
- (void)onMessageSendDoneWithConnectObj:(id <IConnectionObj> _Nullable)connectObj errCode:(NSInteger)errCode signalId:(uint32_t)signalId;
/// @brief 接收到对端的消息事件
/// @param connectObj : 当前连接对象
/// @param recvedSignalData : 接收到的信令数据
- (void)onMessageRecvedWithConnectObj:(id <IConnectionObj> _Nullable)connectObj recvedSignalData:(NSData * _Nonnull)recvedSignalData;
/// @brief 传输接收单个文件开始回调
/// @param connectObj : 当前连接对象
/// @param startDescrption : 启动描述
- (void)onFileTransRecvStartWithConnectObj:(id <IConnectionObj> _Nullable)connectObj startDescrption:(NSData * _Nonnull)startDescrption;
/// @brief 传输接收单个文件数据回调
/// @param connectObj : 当前连接对象
/// @param recvedData : 接收到的数据内容
- (void)onFileTransRecvDataWithConnectObj:(id <IConnectionObj> _Nullable)connectObj recvedData:(NSData * _Nonnull)recvedData;
/// @brief 传输接收单个文件完成回调
/// @param connectObj : 当前连接对象
/// @param transferEnd : 是否整个传输都结束
/// @param doneDescrption: 结束描述
- (void)onFileTransRecvDoneWithConnectObj:(id <IConnectionObj> _Nullable)connectObj transferEnd:(BOOL)transferEnd doneDescrption:(NSData * _Nonnull)doneDescrption;
/// <ul>
///   <li>
///     @brief 传输过程中遇到问题，本次传输失败（可以重新进行下一次传输）
///   </li>
///   <li>
///     @param connectObj : 当前连接对象
///   </li>
///   <li>
///     @param errCode : 传输错误码
///   </li>
/// </ul>
- (void)onFileTransErrorWithConnectObj:(id <IConnectionObj> _Nullable)connectObj errCode:(NSInteger)errCode;
@end


SWIFT_PROTOCOL("_TtP12AgoraIotLink22IConnectionMgrListener_")
@protocol IConnectionMgrListener
/// @brief 链接创建完成事件
/// @param connectObj : 链接对象
/// @param errCode : 创建错误码，XOK––表示创建成功
/// XERR_UNSUPPORTED––本地端连接时产生错误
/// XERR_HTTP_RESP_CODE––服务器返回连接失败
/// XERR_INVALID_PARAM––服务器返回连接失败，连接参数有错误
/// XERR_TIMEOUT––连接超时，对端无回应
- (void)onConnectionCreateDoneWithConnectObj:(id <IConnectionObj> _Nullable)connectObj errCode:(NSInteger)errCode;
/// @brief 正常连接成功后，对端主动断开链接事件
/// @param connectObj : 链接对象
/// @param errCode : 错误代码，0表示对端主动正常断开； 1表示因为网络问题对端掉线断开
- (void)onPeerDisconnectedWithConnectObj:(id <IConnectionObj> _Nullable)connectObj errCode:(NSInteger)errCode;
/// <ul>
///   <li>
///     @brief 对端接听或者拒绝回应事件
///   </li>
///   <li>
///     @param connectObj : 链接对象
///   </li>
///   <li>
///     @param answer : true–表示对端接听;  false–表示对端拒绝
///   </li>
/// </ul>
- (void)onPeerAnswerOrRejectWithConnectObj:(id <IConnectionObj> _Nullable)connectObj answer:(BOOL)answer;
@end

@class NetworkStatus;
@class StreamStatus;
@class UIView;

SWIFT_PROTOCOL("_TtP12AgoraIotLink14IConnectionObj_")
@protocol IConnectionObj
/// @brief 注册回调接口
/// @param callBackListener : 回调接口
/// @return 错误码
- (NSInteger)registerListenerWithCallBackListener:(id <ICallbackListener> _Nonnull)callBackListener SWIFT_WARN_UNUSED_RESULT;
/// @brief 注销回调接口
/// @return 错误码
- (NSInteger)unregisterListener SWIFT_WARN_UNUSED_RESULT;
/// @brief 根据获取链接信息
/// @return 返回当前链接信息
- (ConnectionInfo * _Nonnull)getInfo SWIFT_WARN_UNUSED_RESULT;
- (NetworkStatus * _Nonnull)getNetworkStatus SWIFT_WARN_UNUSED_RESULT;
/// @brief 控制推送本地视频流
/// @param pubVideo: 是否推送视频流
/// @return 错误码，XOK–推送成功；
/// XERR_BAD_STATE–当前未连接导致推送失败
/// XERR_UNSUPPORTED–视频数据推送失败
- (NSInteger)publishVideoEnableWithPubVideo:(BOOL)pubVideo result:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))result SWIFT_WARN_UNUSED_RESULT;
/// @brief 控制推送本地音频
/// @param pubAudio: 是否推送音频流
/// @return 错误码，XOK–推送成功；
/// XERR_BAD_STATE–当前未连接导致推送失败
/// XERR_UNSUPPORTED–音频数据推送失败
- (NSInteger)publishAudioEnableWithPubAudio:(BOOL)pubAudio codecType:(enum AudioCodecType)codecType result:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))result SWIFT_WARN_UNUSED_RESULT;
/// @brief 获取对端流的信息
/// @param peerStreamId : 指定的 对端StreamId
/// @return 返回流的状态信息
- (StreamStatus * _Nonnull)getStreamStatusWithPeerStreamId:(enum StreamId)peerStreamId SWIFT_WARN_UNUSED_RESULT;
/// @brief 开始订阅对端流
/// @param peerStreamId : 指定的 对端StreamId
/// @param attachMsg : 订阅附加信息
/// @return 错误码，XOK–订阅成功；
/// XERR_BAD_STATE–当前未连接导致订阅失败
/// XERR_UNSUPPORTED–订阅失败
- (void)streamSubscribeStartWithPeerStreamId:(enum StreamId)peerStreamId attachMsg:(NSString * _Nonnull)attachMsg result:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))result;
/// @brief 停止订阅对端流，停止订阅后，不能再收看相应流的音视频数据
/// @param peerStreamId : 指定的 对端StreamId
/// @return 错误码，XOK–取消订阅成功；
/// XERR_BAD_STATE–当前未连接导致取消失败
/// XERR_UNSUPPORTED–取消订阅失败
- (void)streamSubscribeStopWithPeerStreamId:(enum StreamId)peerStreamId;
/// @brief 设置对端视频帧预览控件
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @param displayView: 视频帧显示控件
/// @return 错误码，XOK–设置成功；
/// XERR_BAD_STATE–当前未连接导致设置失败
/// XERR_UNSUPPORTED–设置失败
- (NSInteger)setVideoDisplayViewWithSubStreamId:(enum StreamId)subStreamId displayView:(UIView * _Nullable)displayView SWIFT_WARN_UNUSED_RESULT;
/// @brief 设置对端流音频流是否静音
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @param mute: 控制是否静音
/// @return 错误码，XOK–设置成功；
/// XERR_BAD_STATE–当前未连接导致设置失败
/// XERR_UNSUPPORTED–设置失败
- (void)muteAudioPlaybackWithSubStreamId:(enum StreamId)subStreamId previewAudio:(BOOL)previewAudio result:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))result;
/// @brief 设置本地播放所有混音后音频的音量
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @param volumeLevel: 音量级别
/// @return 错误码，XOK–设置成功；
/// XERR_BAD_STATE–当前未连接导致设置失败
/// XERR_UNSUPPORTED–设置失败
- (void)setAudioPlaybackVolumeWithSubStreamId:(enum StreamId)subStreamId volumeLevel:(NSInteger)volumeLevel result:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))result;
- (NSInteger)streamVideoFrameShotWithSubStreamId:(enum StreamId)subStreamId saveFilePath:(NSString * _Nonnull)saveFilePath cb:(void (^ _Nonnull)(NSInteger, NSInteger, NSInteger))cb SWIFT_WARN_UNUSED_RESULT;
/// @brief 开始录制当前链接（包括音视频流），仅在预览状态下才能调用
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @param outFilePath : 输出保存的视频文件路径（应用层确保文件有可写权限）
/// @return 错误码，XOK–开始录制成功；
/// XERR_BAD_STATE–当前未连接导致开始录制失败
/// XERR_UNSUPPORTED–录制失败
- (NSInteger)streamRecordStartWithSubStreamId:(enum StreamId)subStreamId outFilePath:(NSString * _Nonnull)outFilePath SWIFT_WARN_UNUSED_RESULT;
/// @brief 停止录制当前通话，仅在通话状态下才能调用
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @return 错误码，XOK–开始录制成功；
/// XERR_BAD_STATE–当前未连接导致停止录制失败
/// XERR_UNSUPPORTED–停止失败
- (NSInteger)streamRecordStopWithSubStreamId:(enum StreamId)subStreamId SWIFT_WARN_UNUSED_RESULT;
/// @brief 判断当前是否正在本地录制
/// @param subStreamId : 指定订阅预览的 对端StreamId
/// @return true 表示正在本地录制频道； false: 不在录制
- (BOOL)isStreamRecordingWithSubStreamId:(enum StreamId)subStreamId SWIFT_WARN_UNUSED_RESULT;
/// @brief 发送信令到链接的对端，发送结果通过 onSignalSendDone() 回调异步通知
/// @param messageData : 发送的信令内容
/// @return 消息的唯一标识 messageId, null表示错误，在回调中依赖messageId进行区分
- (uint32_t)sendMessageDataWithMessageData:(NSData * _Nonnull)messageData SWIFT_WARN_UNUSED_RESULT;
/// @brief 开始传输
/// @param startMessage : 发送给对端的请求数据，由应用层自定义
/// @return 错误码
- (NSInteger)fileTransferStartWithStartMessage:(NSString * _Nonnull)startMessage SWIFT_WARN_UNUSED_RESULT;
/// @brief 传输停止
/// @param stopMessage : 发送给对端的停止数据，由应用层自定义
/// @return 错误码
- (void)fileTransferStop;
/// @brief 判断当前是否正在传输
/// @return true–当前有个传输正在进行； false–当前没有传输进行
- (BOOL)isFileTransfering SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12AgoraIotLink9InitParam")
@interface InitParam : NSObject
@property (nonatomic, copy) NSString * _Nonnull mAppId;
@property (nonatomic, copy) NSString * _Nonnull mLocalNodeId;
@property (nonatomic, copy) NSString * _Nonnull mLocalNodeToken;
@property (nonatomic) NSInteger mRegion;
@property (nonatomic, copy) NSString * _Nonnull mCustomerKey;
@property (nonatomic, copy) NSString * _Nonnull mCustomerSecret;
@property (nonatomic, copy) NSString * _Nullable mLogFileName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AgoraIotLink16IotAppSdkManager")
@interface IotAppSdkManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12AgoraIotLink10IotLibrary")
@interface IotLibrary : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12AgoraIotLink6Logger")
@interface Logger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, MemberState, closed) {
  MemberStateExist = 0,
  MemberStateEnter = 1,
  MemberStateLeave = 2,
};

typedef SWIFT_ENUM(NSInteger, MessageChannelStatus, closed) {
  MessageChannelStatusDataArrived = 0,
  MessageChannelStatusDisconnected = 1,
  MessageChannelStatusConnecting = 2,
  MessageChannelStatusConnected = 3,
  MessageChannelStatusReconnecting = 4,
  MessageChannelStatusAborted = 5,
  MessageChannelStatusTokenWillExpire = 6,
  MessageChannelStatusTokenDidExpire = 7,
  MessageChannelStatusUnknownError = 8,
};



/// @brief RTC状态信息
SWIFT_CLASS("_TtC12AgoraIotLink13NetworkStatus")
@interface NetworkStatus : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RdtChannelState, closed) {
  RdtChannelStateClosed = 0,
  RdtChannelStateOpened = 1,
  RdtChannelStateUnknown = 2,
};


SWIFT_CLASS("_TtC12AgoraIotLink9RtmMsgObj")
@interface RtmMsgObj : NSObject
@property (nonatomic) uint32_t sequenceId;
@property (nonatomic, copy) NSString * _Nonnull peerId;
@property (nonatomic, copy) NSData * _Nullable msgObj;
@property (nonatomic) NSTimeInterval timeStamp;
@property (nonatomic, copy) void (^ _Nonnull reqCbObj)(uint32_t, NSInteger, NSString * _Nonnull);
- (nonnull instancetype)initWithSequenceId:(uint32_t)sequenceId peerId:(NSString * _Nonnull)peerId msgObj:(NSData * _Nonnull)msgObj timeStamp:(NSTimeInterval)timeStamp reqCbObj:(void (^ _Nonnull)(uint32_t, NSInteger, NSString * _Nonnull))reqCbObj OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RtmStatus, closed) {
  RtmStatusIDLED = 0,
  RtmStatusCREATED = 1,
  RtmStatusENTERING = 2,
  RtmStatusENTERED = 3,
};

typedef SWIFT_ENUM(NSInteger, SdkState, closed) {
  SdkStateInvalid = 0,
  SdkStateRunning = 1,
};

/// @brief StreamId 定义
typedef SWIFT_ENUM(NSInteger, StreamId, closed) {
  StreamIdBROADCAST_STREAM_1 = 1,
/// < 公有StreamId 1
  StreamIdBROADCAST_STREAM_2 = 2,
/// < 公有StreamId 2
  StreamIdBROADCAST_STREAM_3 = 3,
/// < 公有StreamId 3
  StreamIdBROADCAST_STREAM_4 = 4,
/// < 公有StreamId 4
  StreamIdBROADCAST_STREAM_5 = 5,
/// < 公有StreamId 5
  StreamIdBROADCAST_STREAM_6 = 6,
/// < 公有StreamId 6
  StreamIdBROADCAST_STREAM_7 = 7,
/// < 公有StreamId 7
  StreamIdBROADCAST_STREAM_8 = 8,
/// < 公有StreamId 8
  StreamIdBROADCAST_STREAM_9 = 9,
/// < 公有StreamId 9
  StreamIdUNICAST_STREAM_1 = 10,
/// < 私有StreamId 1，这个保留，应用层不要使用
  StreamIdUNICAST_STREAM_2 = 11,
/// < 私有StreamId 2
  StreamIdUNICAST_STREAM_3 = 12,
/// < 私有StreamId 3
  StreamIdUNICAST_STREAM_4 = 13,
/// < 私有StreamId 4
  StreamIdUNICAST_STREAM_5 = 14,
/// < 私有StreamId 5
  StreamIdUNICAST_STREAM_6 = 15,
/// < 私有StreamId 6
  StreamIdUNICAST_STREAM_7 = 16,
/// < 私有StreamId 7
  StreamIdUNICAST_STREAM_8 = 17,
/// < 私有StreamId 8
  StreamIdUNICAST_STREAM_9 = 18,
};


SWIFT_CLASS("_TtC12AgoraIotLink16StreamSessionObj")
@interface StreamSessionObj : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12AgoraIotLink12StreamStatus")
@interface StreamStatus : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, TransferFileState, closed) {
  TransferFileStateIdeal = 0,
  TransferFileStateTransfering = 1,
};


enum VideoQualityType : NSInteger;
enum VideoSuperResolution : NSInteger;

/// @brief 设置的视频质量参数
SWIFT_CLASS("_TtC12AgoraIotLink17VideoQualityParam")
@interface VideoQualityParam : NSObject
@property (nonatomic) enum VideoQualityType mQualityType;
/// < 视频质量类型，参考 @VideoQuality
@property (nonatomic) enum VideoSuperResolution mSrDegree;
/// < 超分程度，参考 @VideoSuperResolution，仅对 typeSR有效
@property (nonatomic) NSInteger mSiDegree;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 视频质量类型
typedef SWIFT_ENUM(NSInteger, VideoQualityType, closed) {
  VideoQualityTypeNormal = 0,
  VideoQualityTypeSr = 1,
  VideoQualityTypeSi = 2,
};

/// 视频超分程度
typedef SWIFT_ENUM(NSInteger, VideoSuperResolution, closed) {
  VideoSuperResolutionSrDegree_100 = 100,
  VideoSuperResolutionSrDegree_133 = 133,
  VideoSuperResolutionSrDegree_150 = 150,
  VideoSuperResolutionSrDegree_200 = 200,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
